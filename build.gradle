plugins {
    id "dev.architectury.loom" version "1.10-SNAPSHOT"
    id "maven-publish"
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    forge {
        mixinConfigs = [
                "mcreator_mem_fix.mixins.json"
        ]
    }
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "KosmX's maven"
        url = 'https://maven.kosmx.dev/'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = 'GeckoLib'
                url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
            }
        }
        filter {
            includeGroup('software.bernie.geckolib')
            includeGroup('com.eliotlash.mclib')
        }
    }
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
    }

    // your forge dependency, this is **required** when using Forge Loom in forge mode!
    forge "net.minecraftforge:forge:${project.forge_version}"

    // Testing Mods
    modImplementation "curse.maven:solo-craft-reawakening-1003429:6643921"
    modImplementation "dev.kosmx.player-anim:player-animation-lib-forge:${project.player_anim_version}"
    modImplementation "software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}"
    forgeRuntimeLibrary implementation("com.eliotlash.mclib:mclib:20")
}

processResources {
    inputs.property "version", project.version
    inputs.property "mod_id", project.mod_id

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version, "mod_id": project.mod_id
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
			from components.java
		}
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

def propertiesFile = file("secrets.properties")

def properties = new Properties()

if (propertiesFile.exists()) {
    propertiesFile.withReader { properties.load(it) }
}

publishMods {
    type = STABLE
    changelog = file("CHANGELOG.md").text
    file = remapJar.archiveFile

    modLoaders.add("forge")

    modrinth {

    }
}